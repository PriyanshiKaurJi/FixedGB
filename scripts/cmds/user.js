const { getTime } = global.utils;

module.exports = {
	config: {
		name: "user",
		version: "1.6",
		author: "NTKhang || Priyanshi Kaur",
		countDown: 5,
		role: 2,
		description: {
			vi: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng trong h·ªá th·ªëng bot",
			en: "Manage users in bot system"
		},
		category: "owner",
		guide: {
			vi: `
   {pn} [find | -f | search | -s] <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n
   {pn} [ban | -b] [<uid> | @tag | reply tin nh·∫Øn] <reason>: c·∫•m ng∆∞·ªùi d√πng
   {pn} unban [<uid> | @tag | reply tin nh·∫Øn]: b·ªè c·∫•m ng∆∞·ªùi d√πng
   {pn} warn [<uid> | @tag | reply tin nh·∫Øn] <reason>: c·∫£nh b√°o ng∆∞·ªùi d√πng (3 l·∫ßn c·∫•m)
   {pn} list: xem danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m
   {pn} status [<uid> | @tag | reply tin nh·∫Øn]: ki·ªÉm tra tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng`,
			en: `
   {pn} [find | -f | search | -s] <name>: search for users by name
   {pn} [ban | -b] [<uid> | @tag | reply message] <reason>: ban a user
   {pn} unban [<uid> | @tag | reply message]: unban a user
   {pn} warn [<uid> | @tag | reply message] <reason>: warn a user (3 warnings = ban)
   {pn} list: view list of banned users
   {pn} status [<uid> | @tag | reply message]: check a user's status`
		}
	},

	langs: {
		vi: {
			noUserFound: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o c√≥ t√™n kh·ªõp v·ªõi t·ª´ kh√≥a: \"%1\" trong d·ªØ li·ªáu c·ªßa bot",
			userFound: "üîé T√¨m th·∫•y %1 ng∆∞·ªùi d√πng:\n%2",
			uidRequired: "‚ùå UID c·ªßa ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
			reasonRequired: "‚ùå L√Ω do kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
			userHasBanned: "‚ö†Ô∏è Ng∆∞·ªùi d√πng [%1 | %2] ƒë√£ b·ªã c·∫•m:\n¬ª L√Ω do: %3\n¬ª Ng√†y: %4",
			userBanned: "‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng [%1 | %2]:\n¬ª L√Ω do: %3\n¬ª Ng√†y: %4",
			userNotBanned: "üü¢ Ng∆∞·ªùi d√πng [%1 | %2] kh√¥ng b·ªã c·∫•m",
			userUnbanned: "‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng [%1 | %2]",
			listBannedUsers: "üö´ Danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m:\n%1",
			noBannedUsers: "‚úÖ Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng b·ªã c·∫•m",
			userStatus: "üë§ Tr·∫°ng th√°i ng∆∞·ªùi d√πng [%1 | %2]:\n¬ª C·∫•m: %3\n¬ª L√Ω do: %4\n¬ª Ng√†y: %5",
			userWarned: "‚ö†Ô∏è ƒê√£ c·∫£nh b√°o ng∆∞·ªùi d√πng [%1 | %2]. T·ªïng s·ªë c·∫£nh b√°o: %3",
			userMaxWarn: "‚ö†Ô∏è Ng∆∞·ªùi d√πng [%1 | %2] ƒë√£ ƒë·∫°t 3 c·∫£nh b√°o v√† b·ªã c·∫•m:\n¬ª L√Ω do: C·∫£nh c√°o t·ªëi ƒëa\n¬ª Ng√†y: %3"
		},
		en: {
			noUserFound: "‚ùå No user found matching the keyword: \"%1\"",
			userFound: "üîé Found %1 user(s):\n%2",
			uidRequired: "‚ùå UID of the user cannot be empty",
			reasonRequired: "‚ùå Reason cannot be empty",
			userHasBanned: "‚ö†Ô∏è User [%1 | %2] is already banned:\n¬ª Reason: %3\n¬ª Date: %4",
			userBanned: "‚úÖ User [%1 | %2] has been banned:\n¬ª Reason: %3\n¬ª Date: %4",
			userNotBanned: "üü¢ User [%1 | %2] is not banned",
			userUnbanned: "‚úÖ User [%1 | %2] has been unbanned",
			listBannedUsers: "üö´ List of banned users:\n%1",
			noBannedUsers: "‚úÖ There are no banned users",
			userStatus: "üë§ User Status [%1 | %2]:\n¬ª Banned: %3\n¬ª Reason: %4\n¬ª Date: %5",
			userWarned: "‚ö†Ô∏è User [%1 | %2] has been warned. Total warnings: %3",
			userMaxWarn: "‚ö†Ô∏è User [%1 | %2] reached 3 warnings and was banned:\n¬ª Reason: Max warnings\n¬ª Date: %3"
		}
	},

	onStart: async function ({ args, usersData, message, event, prefix, getLang }) {
		const type = args[0];
		switch (type) {
			case "find":
			case "-f":
			case "search":
			case "-s": {
				const allUser = await usersData.getAll();
				const keyWord = args.slice(1).join(" ");
				const result = allUser.filter(item => (item.name || "").toLowerCase().includes(keyWord.toLowerCase()));
				const msg = result.reduce((i, user) => i += `\n‚ï≠ Name: ${user.name}\n‚ï∞ ID: ${user.userID}`, "");
				message.reply(result.length === 0 ? getLang("noUserFound", keyWord) : getLang("userFound", result.length, msg));
				break;
			}

			case "ban":
			case "-b": {
				let uid, reason;
				if (event.type === "message_reply") {
					uid = event.messageReply.senderID;
					reason = args.slice(1).join(" ");
				} else if (Object.keys(event.mentions).length > 0) {
					uid = Object.keys(event.mentions)[0];
					reason = args.slice(1).join(" ").replace(event.mentions[uid], "").trim();
				} else if (args[1]) {
					uid = args[1];
					reason = args.slice(2).join(" ");
				} else return message.SyntaxError();

				if (!uid) return message.reply(getLang("uidRequired"));
				if (!reason) return message.reply(getLang("reasonRequired"));

				const userData = await usersData.get(uid);
				if (userData?.banned?.status)
					return message.reply(getLang("userHasBanned", uid, userData.name, userData.banned.reason, userData.banned.date));
				
				const time = getTime("DD/MM/YYYY HH:mm:ss");
				await usersData.set(uid, {
					banned: {
						status: true,
						reason,
						date: time,
					}
				});
				message.reply(getLang("userBanned", uid, userData?.name || "Unknown", reason, time));
				break;
			}

			case "unban":
			case "-u": {
				let uid;
				if (event.type === "message_reply") {
					uid = event.messageReply.senderID;
				} else if (Object.keys(event.mentions).length > 0) {
					uid = Object.keys(event.mentions)[0];
				} else if (args[1]) {
					uid = args[1];
				} else return message.SyntaxError();

				if (!uid) return message.reply(getLang("uidRequired"));

				const userData = await usersData.get(uid);
				if (!userData?.banned?.status)
					return message.reply(getLang("userNotBanned", uid, userData?.name || "Unknown"));

				await usersData.set(uid, { banned: {} });
				message.reply(getLang("userUnbanned", uid, userData?.name || "Unknown"));
				break;
			}

			case "list": {
				const allUsers = await usersData.getAll();
				const bannedUsers = allUsers.filter(user => user?.banned?.status);
				if (bannedUsers.length === 0) return message.reply(getLang("noBannedUsers"));

				const list = bannedUsers.map(user => `‚ï≠ Name: ${user.name}\n‚ï∞ ID: ${user.userID}\n¬ª Reason: ${user.banned.reason}\n¬ª Date: ${user.banned.date}`).join("\n\n");
				message.reply(getLang("listBannedUsers", list));
				break;
			}

			case "status": {
				let uid;
				if (event.type === "message_reply") {
					uid = event.messageReply.senderID;
				} else if (Object.keys(event.mentions).length > 0) {
					uid = Object.keys(event.mentions)[0];
				} else if (args[1]) {
					uid = args[1];
				} else return message.SyntaxError();

				if (!uid) return message.reply(getLang("uidRequired"));

				const userData = await usersData.get(uid);
				const status = userData?.banned?.status ? "Yes" : "No";
				const reason = userData?.banned?.reason || "N/A";
				const date = userData?.banned?.date || "N/A";

				message.reply(getLang("userStatus", uid, userData?.name || "Unknown", status, reason, date));
				break;
			}

			case "warn": {
				let uid, reason = args.slice(1).join(" ") || "Empty reason";
				if (event.type === "message_reply") {
					uid = event.messageReply.senderID;
				} else if (Object.keys(event.mentions).length > 0) {
					uid = Object.keys(event.mentions)[0];
				} else if (args[1]) {
					uid = args[1];
				} else return message.SyntaxError();

				if (!uid) return message.reply(getLang("uidRequired"));

				const userData = await usersData.get(uid);
				let warnings = userData?.warnings || 0;

				warnings++;
				if (warnings >= 3) {
					const time = getTime("DD/MM/YYYY HH:mm:ss");
					await usersData.set(uid, {
						banned: {
							status: true,
							reason: "Max warnings",
							date: time,
						},
						warnings: 0
					});
					return message.reply(getLang("userMaxWarn", uid, userData?.name || "Unknown", time));
				}

				await usersData.set(uid, { warnings });
				message.reply(getLang("userWarned", uid, userData?.name || "Unknown", warnings));
				break;
			}

			default: {
				message.reply(getLang("SyntaxError"));
			}
		}
	}
};
